// prisma/schema.prisma
// Defines the PostgreSQL schema for the kozijnen-fabriek application.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNING
  IN_PRODUCTION
  COMPLETED
  ON_HOLD
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

enum InvoiceType {
  QUOTE
  INVOICE
}

enum InvoiceDocumentStatus {
  PENDING
  PROCESSING
  GENERATED
  FAILED
}

enum CutPlanStrategy {
  GREEDY
  ILP
}

enum CutPlanStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
model Customer {
  id            String    @id @default(uuid())
  name          String
  contactPerson String?
  email         String?   @unique
  phone         String?
  address       String?
  notes         String?
  projects      Project[]
  invoices      Invoice[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id           String        @id @default(uuid())
  name         String
  reference    String?
  status       ProjectStatus @default(PLANNING)
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  address      String?
  windowFrames WindowFrame[]
  walls        Wall[]
  invoices     Invoice[]
  cutPlans     CutPlan[]
  startDate    DateTime?
  endDate      DateTime?
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WindowFrame {
  id            String            @id @default(uuid())
  project       Project           @relation(fields: [projectId], references: [id])
  projectId     String
  label         String
  status        String            @default("Awaiting glass")
  widthMm       Int
  heightMm      Int
  configuration Json?
  materials     Json?
  unitPrice     Decimal?          @db.Decimal(10, 2)
  costProfiles  Decimal           @db.Decimal(10, 2) @default(0)
  costGlazing   Decimal           @db.Decimal(10, 2) @default(0)
  costHardware  Decimal           @db.Decimal(10, 2) @default(0)
  notes         String?
  instances     WindowInstance[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Invoice {
  id          String        @id @default(uuid())
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String
  project     Project?      @relation(fields: [projectId], references: [id])
  projectId   String?
  number      String        @unique
  issueDate   DateTime      @default(now())
  dueDate     DateTime?
  status      InvoiceStatus @default(DRAFT)
  type        InvoiceType   @default(QUOTE)
  currency          String                @default("EUR")
  documentStatus    InvoiceDocumentStatus @default(PENDING)
  documentVersion   Int                   @default(1)
  documentUrl       String?
  documentMeta      Json?
  documentGeneratedAt DateTime?
  integrationState  Json?
  externalReference String?
  lineItems         Json
  totalAmount       Decimal               @db.Decimal(12, 2)
  notes             String?
  paymentLogs       PaymentLog[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model Wall {
  id          String            @id @default(uuid())
  project     Project           @relation(fields: [projectId], references: [id])
  projectId   String
  name        String
  description String?
  widthMm     Int
  heightMm    Int?
  elevation   String?
  windows     WindowInstance[]
  cutPlans    CutPlan[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model WindowInstance {
  id             String       @id @default(uuid())
  wall           Wall         @relation(fields: [wallId], references: [id])
  wallId         String
  windowFrame    WindowFrame? @relation(fields: [windowFrameId], references: [id])
  windowFrameId  String?
  label          String
  positionXMm    Int          @default(0)
  positionYMm    Int          @default(0)
  sillHeightMm   Int          @default(0)
  widthMm        Int
  heightMm       Int
  rotationDeg    Int          @default(0)
  config         Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model InventoryProfile {
  id                String         @id @default(uuid())
  sku               String         @unique
  name              String
  profileType       String?
  lengthMm          Int
  stockQuantity     Int            @default(0)
  scrapAllowanceMm  Int            @default(0)
  metadata          Json?
  cutPlanItems      CutPlanItem[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model CutPlan {
  id        String           @id @default(uuid())
  project   Project          @relation(fields: [projectId], references: [id])
  projectId String
  wall      Wall?            @relation(fields: [wallId], references: [id])
  wallId    String?
  strategy  CutPlanStrategy  @default(GREEDY)
  status    CutPlanStatus    @default(PENDING)
  summary   Json?
  items     CutPlanItem[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model CutPlanItem {
  id                 String           @id @default(uuid())
  cutPlan            CutPlan          @relation(fields: [cutPlanId], references: [id])
  cutPlanId          String
  inventoryProfile   InventoryProfile @relation(fields: [inventoryProfileId], references: [id])
  inventoryProfileId String
  sourceLengthMm     Int
  usedLengthMm       Int
  wasteLengthMm      Int
  segments           Json
  createdAt          DateTime         @default(now())
}
model InventoryItem {
  id           String   @id @default(uuid())
  sku          String   @unique
  name         String
  category     String
  quantity     Int      @default(0)
  unit         String
  location     String?
  minQuantity  Int?     @default(0)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model PaymentLog {
  id          String   @id @default(uuid())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  provider    String
  status      String
  amount      Decimal  @db.Decimal(12, 2)
  currency    String   @default("EUR")
  reference   String?
  metadata    Json?
  processedAt DateTime?
  createdAt   DateTime @default(now())
}